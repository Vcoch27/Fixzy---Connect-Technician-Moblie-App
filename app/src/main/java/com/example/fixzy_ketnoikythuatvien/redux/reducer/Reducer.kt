package com.example.fixzy_ketnoikythuatvien.redux.reducer

import android.util.Log
import com.example.fixzy_ketnoikythuatvien.redux.action.Action
import com.example.fixzy_ketnoikythuatvien.redux.data_class.AppState

//x·ª≠ l√≠ c√°c ho·∫°t ƒë·ªông v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
//L·ªõp x·ª≠ l logic chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i
class Reducer {
    companion object {
//        nh·∫≠n v√†o m·ªôt tr·∫°ng th√°i hi·ªán t·∫°i v√† m·ªôt action
        val appReducer: (AppState, Any) -> AppState = { state, action ->
            when (action) {
                is Action.getTest -> {
                    Log.i("Reducer", "Reducer received: ${action.test}") // üëà th√™m log
                    state.copy(test = action.test)
                }
                is Action.setUser -> {
                    Log.i("Reducer", "Reducer received user: ${action.user}")
                    state.copy(user = action.user)
                }
                is Action.FetchCategoriesRequest -> { //B·∫Øt ƒë·∫ßu t·∫£i danh m·ª•c
                    Log.i("Reducer", "Fetching categories...")
                    state.copy(isLoadingCategories = true, categoriesError = null )
                }
                is Action.FetchCategoriesSuccess -> { //khi api tr·∫£ v·ªÅ danh m·ª•c th√†nh c√¥ng
                    Log.i("Reducer", "Categories fetched: ${action.categories}")
                    state.copy(
                        isLoadingCategories = false,
                        categories = action.categories, // C·∫≠p nh·∫≠t danh s√°ch danh m·ª•c
                        categoriesError = null
                    )
                }
                is Action.FetchCategoriesFailure -> {//khi c√≥ l·ªói
                    Log.i("Reducer", "Failed to fetch categories: ${action.error}")
                    state.copy(
                        isLoadingCategories = false,
                        categoriesError = action.error
                    )
                }
                else -> state //khoong kh·ªõp, gi·ªØ tr·∫°ng th√°i hi·ªán t·∫°i
            }
        }
    }

}
